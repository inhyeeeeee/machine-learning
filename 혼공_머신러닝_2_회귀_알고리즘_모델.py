# -*- coding: utf-8 -*-
"""혼공 머신러닝_2. 회귀 알고리즘 모델.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XBowem6TNA6USQNeBvzF72o9tsT3Scct

**2-1. k-최근접 이웃 회귀**


- 임의의 숫자 예측하기
- 예측하려고 하는 샘플에 가장 가까운 샘플 k 선택 후, 이 샘플들의 클래스를 확인하여 다수 클래스를 새로운 샘플의 클래스로 예측
- KNeighborsRegressor 클래스 사용
- 이진분류 (0,1) 가 아닌 length = 데이터(input) / weight = 값, 정답(target)
- score 가 모델 정확도가 아닌 결정계수(R^2)를 나타냄.
  

- R^2 : 회귀 문제의 성능 측정 도구. 1에 가까울수록 좋고, 0에 가까울 수록 성능이 나쁜 모델
"""

### 농어 데이터 준비 및 사이킷런 이용하여 회귀 모델 훈련
# 1. 농어 데이터 준비
import numpy as np
perch_length = np.array([8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 21.0,
       21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 22.5, 22.7,
       23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 27.3, 27.5, 27.5,
       27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 36.5, 36.0, 37.0, 37.0,
       39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 42.0, 43.0, 43.0, 43.5,
       44.0])
perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
       115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
       150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
       218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
       556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
       850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
       1000.0])

import matplotlib.pyplot as plt
plt.scatter(perch_length, perch_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()  # >> 길이 무게 비례

# 2. 훈련 세트와 테스트 세트로 나누기 (length = input/ weight = target (0과 1 분류가 아님!!!!!!!!!!))
from sklearn.model_selection import train_test_split
train_input, test_input, train_target, test_target = train_test_split(
    perch_length, perch_weight, random_state=42)

#    특성이 1개(42,)이므로 수동으로 2차원 배열을 만들어줌 (42,1) > reshape() 함수 처리
train_input = train_input.reshape(-1,1) # 크기에 -1 을 지정하면 나머지 원소 개수로 모두 채우라는 의미
test_input = test_input.reshape(-1,1)
print(train_input.shape, test_input.shape)

# 3. k-최근접 이웃 회귀 알고리즘을 구현한 클래스 KNeighborsRegressor 사용하여 회귀 모델 훈련
from sklearn.neighbors import KNeighborsRegressor
knr = KNeighborsRegressor()
knr.fit(train_input, train_target)

# 4. 테스트 세트로 회귀 모델 평가 >>>> 결정계수 (R^2) = 1- {(target-예측)^2의 합 / (target-average)^2의 합} >>> 예측이 타깃에 아주 가까워면 1에 가까운 값이 됨
print(knr.score(test_input, test_target))
#    target 과 예측한 값 사이의 차이 구하기
from sklearn.metrics import mean_absolute_error
test_prediction = knr.predict(test_input) # 테스트에 대한 예측 만들기
mae = mean_absolute_error(test_target, test_prediction) # 테스트 세트에 대한 평균 절댓값 오차 계산
print(mae) # > 예측이 평균적으로 19g 정도 target 값과 다르다.

### 과대적합 vs 과소적합
# 과대적합 : 테스트 세트가 훈련 세트에 비해 점수가 낮은 경우 / 훈련세트에만 잘 맞는 모델. 따라서 실전에 투이보디면 새로운 샘플에 대한 예측이 잘 동작하지 않을 것.
# 과소적합 : 테스트 세트가 훈련 세트에 비해 점수가 높거나 두 점수 모두 낮은 경우 /  모델이 단순하여 훈련 세트에 적절히 훈련되지 않은 경우
print(knr.score(train_input, train_target)) # > 테스트세트가 더 높음 - 과소적합

### 과소 적합 해결 방법
#   훈련 세트에 더 잘맞게 만들면 테스트 세트의 점수는 조금 낮아질 것임
#   k-최근접 이웃의 알고리즘으로 모델을 더 복잡하게 만드는 방법 : 이웃의 개수를 줄이는 것( 훈련세트에 있는 패턴에 민감해질 것)
knr.n_neighbors = 3 # defalut 값 = 5
knr.fit(train_input, train_target)
print(knr.score(train_input, train_target))
print(knr.score(test_input, test_target))

# 5. 무게 예측 >>> k-최근접 이웃의 한계 : 
print(knr.predict([[50]])) # > 예측값이 1033.3g 이지만 실제로는 더 많이 나옴

import matplotlib.pyplot as plt
distances, indexes = knr.kneighbors([[50]]) # 가장 가까운 이웃까지의 거리와 이웃 샘플의 인덱스 얻기
plt.scatter(train_input, train_target)
plt.scatter(train_input[indexes], train_target[indexes], marker='D')
plt.scatter(50, 1033, marker='^')
plt.xlabel('length (cm)')
plt.ylabel('weight (g)')
plt.show()

#    이웃 샘플의 target 평균(weight) 구하기
print(np.mean(train_target[indexes]))
print(knr.predict([[100]])) # length 가 100cm 인 농어의 무게도 최근접 이웃의 weight 에 따라 똑같이 1033.g 임

distances, indexes = knr.kneighbors([[100]])
plt.scatter(train_input, train_target)
plt.scatter(train_input[indexes], train_target[indexes], marker='D')
plt.scatter(100, 1033, marker='^')
plt.xlabel('length (cm)')
plt.ylabel('weight (g)')
plt.show()

"""**2-2. 선형 회귀 (Linear Regression)**

- 특성이 '하나' 인 경우 어떤 직선을 자동으로 찾고 학습하는 알고리즘
- LinearRegression 클래스 사용
- 모델 파라미터 : y = ax+b 에서 coef_, intercept_ 속성에 각각 기울기 a (=가중치), y절편 b 값 저장


"""

### k-최근접 이웃 회귀 알고리즘이 아닌 선형회귀 알고리즘으로 변경
### 1차 함수 - 최적의 직선 찾기
#1. 1차방정식(추세선) 으로 무게 예측가능
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(train_input, train_target)
print(lr.predict([[50]]))

# 2. 기울기 a, y절편 b 확인
print(lr.coef_, lr.intercept_)

# 3. 농어의 길이 15에서 50까지 직선으로 그리기
plt.scatter(train_input, train_target) # 훈련세트의 산점도 그리기
plt.plot([15,50], [15*lr.coef_+lr.intercept_, 50*lr.coef_+lr.intercept_]) # 15에서 50까지 1차 방정식 그래프 그리기
plt.scatter(50, 1241.8, marker='^') # 50cm 농어 데이터 추가
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# R^2 점수 확인 >> 전체적으로 과소적합 됨 + 그래프 왼쪽을 보면 weight 가 15 이하일 때 weight 가 음수값도 나올 수 있을 것으로 추정됨
print(lr.score(train_input, train_target)) # 훈련 세트
print(lr.score(test_input, test_target)) # 테스트 세트

### 다항 회귀
# 2차 방정식 - 직선이 아닌 최적의 곡선 찾기
# 1. train_input(weight:x값) 제곱한 항(넘파이 브로드캐스팅이 적용됨)을 훈련세트에 추가하기 > 1열에서 2열이 됨
train_poly = np.column_stack((train_input ** 2, train_input))
test_poly = np.column_stack((test_input ** 2, test_input))
print(train_poly.shape, test_poly.shape)

# 2. LinearRegression() 모델 훈련
lr.fit(train_poly, train_target)
print(lr.predict([[50**2, 50]]))

# 3. 각 항 계수, 절편 출력
print(lr.coef_, lr.intercept_)

# 4. 농어의 길이 15에서 50까지 직선으로 그리기
point = np.arange(15,50)
plt.scatter(train_input, train_target)
plt.plot(point, 1.01*point**2 - 21.6*point + 116.05)

plt.scatter(50, 1574, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# R^2 점수 확인 > 훈련 세트, 테스트 세트에 대한 점수가 크게 높아짐. but 아직 테스트 세트의 점수가 조금 더 높음
print(lr.score(train_poly, train_target))
print(lr.score(test_poly, test_target))

"""**2-3.특성 공학과 규제**

> 특성공학 : 기존의 특성을 사용해 새로운 특성을 뽑아내는 작업


- 다중 회귀 : 여러 개의 특성을 사용한 선형 회귀 (ax+by+z). 특성이 2개이면 선형 회귀는 평면을 학습함 > 3차원 공간 형성

"""

### 다중 회귀
#   농어의 길이뿐만 아니라 높이, 두께를 추가하여 3개의 특성을 각각 제곱하여 추가 + 각 특성을 서로 곱해서 또 다른 특성 생성 >> 특성공학
# 1. 데이터 준비 - 판다스 사용하여 csv 파일 열기 (length, height, width, weight, 1 총 5개)
import pandas as pd
df = pd.read_csv('https://bit.ly/perch_csv_data') #read_csv 함수로 데이터프레임 형성
perch_full = df.to_numpy() # 넘파이 배열로 바꾸기
print(perch_full)

import numpy as np
perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
       115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
       150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
       218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
       556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
       850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
       1000.0])

# 2. 훈련세트와 테스트 세트로 나누기
from sklearn.model_selection import train_test_split
train_input, test_input, train_target, test_target = train_test_split(
    perch_full, perch_weight, random_state=42)

# 3. 훈련 세트 새로운 특성만들기 > 사이킷런의 변환기 transformer
from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(include_bias=False) # 자동으로 특성에 추가된 절편 항을 무시하기 때문에 False 지정 안해도 됨 / 특성 기본값 2
poly.fit(train_input) # 입력데이터만 전달
train_poly = poly.transform(train_input) # 입력데이터로 새로운 특성 추가
print(train_poly.shape) # 특성개수

print(poly.get_feature_names_out())

# 4. 테스트 세트 변환
test_poly = poly.transform(test_input)

# 5. 변환된 특성으로 다중 회귀 모델 훈련
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(train_poly, train_target)
print(lr.score(train_poly, train_target))
print(lr.score(test_poly, test_target)) # 과대적합으로 보임

# 6. 특성 추가
poly = PolynomialFeatures(degree=5, include_bias=False) # 5제곱까지 특성 만들기 / 기본값은 2
poly.fit(train_input)
train_poly = poly.transform(train_input)
test_poly = poly.transform(test_input)
print(train_poly.shape) # 특성개수

# 7. 추가한 특성으로 다중 회귀 모델 훈련
lr.fit(train_poly, train_target)
print(lr.score(train_poly, train_target))
print(lr.score(test_poly, test_target)) # 음수????? : 훈련세트에 너무 과대적합

"""2-3.특성 공학과 규제

규제 : 머신러닝 모델이 훈련 세트를 너무 과도하게 학습하지 못하도록 훼방하는 것.

- 선형 회귀 모델의 경우 특성에 곱해지는 계수 (또는 기울기)의 크기를 작게 만드는 것

- 릿지(ridge) 모델 : 계수를 제곱한 값을 기준으로 규제 적용. 계수의 크기를 줄임
- 라쏘(lasso) 모델 : 계수의 절대값을 기준으로 규제 적용. 계수의 크기를 0으로 만들 수 있음

- alpha 값 : 모델 객체를 만들 때 alpha 매개변수로 규제 강도 조절 가능. alpha 값이 크면 규제 강도가 세지므로 계수값을 더 줄이고 조금 더 과소적합되도록 유도.
hyperparameter 이므로 사전에 본인이 지정해야 하는 값임
"""

# StandardScaler 클래스 : 표준점수로 변환해줌 (훈련세트에서 학습한 평균과 표준편차는 이 클래스 객체의 mean_, scale_ 속성에 저장됨)
from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
ss.fit(train_poly)
train_scaled = ss.transform(train_poly)
test_scaled = ss.transform(test_poly)

# 릿지 회귀
from sklearn.linear_model import Ridge 
ridge = Ridge()
ridge.fit(train_scaled, train_target)
print(ridge.score(train_scaled, train_target))
print(ridge.score(test_scaled, test_target))

# 적절한 alpha 값 찾기
# alpha 값 변경때마다 score() 메서드의 결과를 저장할 리스트 만듦
import matplotlib.pyplot as plt
train_score = []
test_score = []
# alpha 값을 0.001 에서 100까지 10배씩 늘림
alpha_list = [0.001, 0.01, 0.1, 1, 10, 100] 
for alpha in alpha_list:
  ridge = Ridge(alpha=alpha)
  ridge.fit(train_scaled, train_target)
  train_score.append(ridge.score(train_scaled, train_target))
  test_score.append(ridge.score(test_scaled, test_target))
# 그래프 그리기
plt.plot(np.log10(alpha_list), train_score) # 파란색
plt.plot(np.log10(alpha_list), test_score) # 주황색
plt.xlabel('log(alpha)')
plt.ylabel('R^2')
plt.show() # > 두 그래프가 가장 가깝고 테스트 세트의 점수가 가장 높은 -1, 즉 적절한 alpha 값은 10^-1=0.1

# 최종 모델 훈련
ridge = Ridge(alpha=0.1)
ridge.fit(train_scaled, train_target)
print(ridge.score(train_scaled, train_target))
print(ridge.score(test_scaled, test_target))

# 라쏘 회귀
from sklearn.linear_model import Lasso
lasso = Lasso()
lasso.fit(train_scaled, train_target)
print(lasso.score(train_scaled, train_target))
print(lasso.score(test_scaled, test_target))

# 적절한 alpha 값 찾기
train_score = []
test_score = []
alpha_list = [0.001, 0.01, 0.1, 1, 10, 100]
for alpha in alpha_list:
  lasso = Lasso(alpha=alpha, max_iter=10000)
  lasso.fit(train_scaled, train_target)
  train_score.append(lasso.score(train_scaled, train_target))
  test_score.append(lasso.score(test_scaled, test_target))

# 그래프 그리기
plt.plot(np.log10(alpha_list), train_score) # 파란색
plt.plot(np.log10(alpha_list), test_score) # 주황색
plt.xlabel('log(alpha)')
plt.ylabel('R^2')
plt.show() # > 두 그래프가 가장 가깝고 테스트 세트의 점수가 가장 높은 1, 즉 적절한 alpha 값은 10^1=10

# 최종 모델 훈련
lasso = Lasso(alpha=10)
lasso.fit(train_scaled, train_target)
print(lasso.score(train_scaled, train_target))
print(lasso.score(test_scaled, test_target))

# 라쏘 모델은 계수 값을 아예 0으로 만들 수 있음 > coef_ 속성에 lasso 모델 계수 저장되어 있음
print(np.sum(lasso.coef_ ==0)) # 넘파이 배열에 비교 연산자를 사용하면 각 원소는 True(1), False(0)으로 인식하여 덧셈 가능
                               # 55개의 특성 중 라쏘 모델이 사용한 특성은 15개 > 이러한 특징으로 유용한 특성을 골라내는 용도로 사용 가능

