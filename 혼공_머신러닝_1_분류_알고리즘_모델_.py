# -*- coding: utf-8 -*-
"""혼공 머신러닝_1. 분류 알고리즘 모델 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16fuAHdpxtrCH8hFhGGVbSmhSaZwXBOUn

**1-1. 이진분류**

: 머신러닝에서 2개의 종류(class) 중 하나를 고르는 문제

ex) '참' or '거짓 ,  '0' or '1'
"""

# 1. 도미(35마리) 데이터 준비 - length, weight 은 각각 특성(feature)
bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

# 2. 빙어(14마리)  데이터 준비 - length, weight 은 각각 특성(feature)
smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

# 3. 산점도 표시 (scatter plot)
#    과학계산용 그래프를 그리는 대표적인 패키지 = 'matplotlib'
import matplotlib.pyplot as plt
plt.scatter(bream_length, bream_weight)
plt.scatter(smelt_length, smelt_weight)
plt.xlabel('lenght')
plt.ylabel('weight')
plt.show()

"""**1-2. 머신러닝 프로그램**

i ) 지도학습 : 정답(target) 이 있고 알고리즘이 그 정답을 맞히는 것을 학습


>  k-최근접 이웃 (k-nearest Neighbors) 알고리즘 : 가장 가까운 직선거리의 데이터 default 5개를 참고하여 예측함

ii ) 비지도학습 : 정답(target) 없이 input 데이터만 사용. 데이터를 잘 파악하거나 변형하는데 도움을 줌
"""

### k-최근접 이웃 알고리즘 사용
# 1. 도미 빙어 데이터 합치기 (리스트끼리 더하기)
length = bream_length + smelt_length
weight = bream_weight + smelt_length

# 2.사이킷런(머신러닝 패키지) 사용하기 위해 리스트를 세로 방향으로 늘어뜨린 '2차원 리스트'로 변경
fish_data = [[l,w] for l, w in zip(length, weight)] # zip 함수 : 나열된 리스트에서 원소를 하나씩 꺼내어 l,w 에 할당함
print(fish_data) # > 코랩에서 출력시 줄바꿈 없이 한 행으로 출력됨

# 3. 컴퓨터 프로그램이 이해할 수 있는 숫자 0,1 로 바꾸기
#   : 찾으려는 대상(도미)을 1, 그 외에는 0(빙어)으로 둠
fish_target = [1] * 35 +[0] * 14
print(fish_target)

# 4. KNeighborsClassifier 클래스의 객체(모델) 생성
#   : 사이킷런 패키지에서 k-최근접 이웃 알고리즘을 구현한 클래스
from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier()

# 5. training : 모델에 데이터를 전달하여 규칙을 학습하는 과정
#   : 도미를 찾기 위한 기준을 학습시킴
kn.fit(fish_data, fish_target)

# 6. 모델 평가 : 정확도
kn.score(fish_data, fish_target)
print(kn.score(fish_data, fish_target)) # 모델의 정확도 : 100%

# 7. 새로운 데이터 예측
kn.predict([[30, 600]]) # 리스트의 리스트를 전달해야하기 때문에 2번 사용
print(kn.predict([[30, 600]])) # 도미

import matplotlib.pyplot as plt
plt.scatter(bream_length, bream_weight)
plt.scatter(smelt_length, smelt_weight)
plt.scatter(30, 600, marker= '^')
plt.xlabel('lenght')
plt.ylabel('weight')
plt.show()

"""**1-3. 훈련 세트와 테스트 세트 나누기**

위처럼 훈련에 사용한 데이터로 모델을 평가하는 것은 적절하지 않음

알고리즘의 성능을 제대로 평가하기 위해선 훈련데이터와 평가에 사용할 데이터가 달라야 함

또한 훈련 세트와 테스트 세트를 나누기 전 샘플을 섞어줘야 함



> i ) 샘플링 편향



"""

# 1. 도미(35마리)와 빙어(14마리) 데이터 준비 - length, weight 은 각각 특성(feature)
fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

# 2. 각 생선의 길이와 무게를 하나의 리스트로 담은 2차원 리스트 생성
fish_data = [[l,w] for l, w in zip(length, weight)]
fish_target = [1] * 35 +[0] * 14

# 3. 객체 생성
from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier()

# 4. 전체 데이터에서 훈련데이터로 쓸 처음 35개의 데이터 선택
train_input = fish_data[:35]
train_target = fish_target[:35]
test_input = fish_data[35:]
test_target = fish_target[35:]

# 5. 훈련 세트로 모델 훈련 및 테스트 세트로 모델 평가
kn = kn.fit(train_input, train_target)
kn.score(test_input, test_target)

"""**1-3. 훈련 세트와 테스트 세트 나누기**

> ii ) 샘플링 : 넘파이 라이브러리를 사용하여 샘플 배열 섞기


*** 넘파이 : 고차원의 배열을 손쉽게 만들고 조작할 수 있는 간편한 도구를 제공


"""

# 1. 파이썬 리스트를 넘파이 배열로 변경
import numpy as np
input_arr = np.array(fish_data)
target_arr = np.array(fish_target)

print(input_arr)
print(input_arr.shape) # 샘플 수, 특성 수

# 2. 랜덤 샘플 생성 - 인덱스값을 랜덤하게 섞음
#    target 과 sample 이 함께 훈련세트나 테스트 세트로 이동해야함. 따라서 훈련세트와 테스트 세트로 나눌 인덱스 값을 넣어줘야 함
np.random.seed(42)
index = np.arange(49) # 0-48 까지 1씩 증가하는 배열 생성
np.random.shuffle(index) # shuffle() 주어진 배열을 무작위로 섞음
print(index)
print(input_arr[[1,3]])

# 3. index 배열의 처음 35개를 훈련 세트로 생성 + 나머지 14개를 테스트 세트로 생성
train_input = input_arr[index[:35]]
train_target = target_arr[index[:35]]
test_input = input_arr[index[35:]]
test_target = target_arr[index[35:]]

# 4. 잘 섞였는지 그래프 확인
import matplotlib.pyplot as plt
plt.scatter(train_input[:,0],train_input[:,1]) # 0=legnth, 1=weight
plt.scatter(test_input[:,0], test_input[:,1])
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# 5. training
kn = kn.fit(train_input, train_target)

# 6. model 평가
kn.score(test_input, test_target)
print(kn.score(test_input, test_target))

# 7. 테스트 세트의 예측 결과와 실제 타깃 확인
print(kn.predict(test_input)) # 테스트 세트의 예측 결과 (1: 도미, 0: 빙어)
print(test_target) # 실제 타깃



"""**1-4. 데이터 전처리**

- 넘파이 사용하여 데이터 준비하기


"""

### 넘파이로 데이터 준비하기
# 1. 도미(35마리)와 빙어(14마리) 데이터 준비 - length, weight 은 각각 특성(feature)
fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

# 2. 넘파이 사용하여 넘파이 배열로 변경
import numpy as np
fish_data =  np.column_stack((fish_length, fish_weight)) # [[length, weight]] 튜플로 전달하여 2열로 생성
print(fish_data[:5])

fish_target = np.concatenate((np.ones(35), np.zeros(14))) # 튜플로 전달
print(fish_target)

# 3. 사이킷런으로 훈련 세트와 테스트 세트 나누기 (무작위로 데이터 나누기 / stratify 매)
from sklearn.model_selection import train_test_split # 25%를 테스트 세트로 떼어냄
train_input, test_input,train_target, test_target = train_test_split(
    fish_data, fish_target, random_state=42)

print(train_input.shape, test_input.shape) # 2차원 배열
print(train_target.shape, test_target.shape) # 1차원 배열(튜플의 원소가 하나면 원소 뒤에 콤마가 추가됨)
print(test_target) # 도미(1)=10개, 빙어(0)=3개 > 샘플링 편향이 조금 나타남 (3.3:1)
# >>> 샘플의 클래스 비율이 일정하지 않다면 stratify 매개변수에 target 데이터 전달
train_input, test_input, train_target, test_target = train_test_split(fish_data, fish_target, stratify=fish_target, random_state=42)
print(test_target) # 샘플링 비슷해짐 (2.5:1)

"""**1-4. 데이터 전처리**

- 수상한 도미 한마리
- 알고리즘이 거리 기반일 때 샘플 간의 거리에 영향을 많이 받으므로 특성값을 일정한 기준으로 맞춰 주어야 함

> 표준 점수 : 각 특성값을 0 에서 표준편차의 몇 배만큼 떨어져 있는지로 변환한 값


"""

# 4. 훈련데이터로 모델을 훈련 및 테스트 데이터로 모델 평가
from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier()
kn.fit(train_input, train_target)
kn.score(test_input, test_target)
print(kn.score(test_input, test_target)) # > 모델 정확도 100 %

print(kn.predict([[25,150]])) # length=25cm, weight=150g 인 생선 종류 예측 >>> 빙어(0) 으로 나옴

import matplotlib.pyplot as plt
plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(25, 150, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show() # 25, 150 데이터는 도미데이터에 가까운 그래프로 나옴

# 5. 25, 150 데이터의 가장 가까운 5개의 이웃 반환
distances, indexes = kn.kneighbors([[25,150]])

plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(train_input[indexes,0], train_input[indexes,1], marker='D')
plt.scatter(25, 150, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

print(train_input[indexes])
print(train_target[indexes])

print(distances)

# 6. x축은 범위와 y축 범위를 맞춰줌
plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(train_input[indexes, 0], train_input[indexes,1], marker='D')
plt.scatter(25, 150, marker='^')
plt.xlim((0,1000))
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# 7. 표준점수 구하기 : 평균을 빼고 표준편차를 나누기
#    보로드캐스팅 : train_input 의 모든 행에서 mean 에 있는 두 평균값을 빼고 std 에 있는 두 표준편차를 모든 행에 적용하는 넘파이의 기능
mean = np.mean(train_input, axis=0)
std =np.std(train_input, axis=0) # axis=0 : 각 행을 따라 각 열의 통계 값을 계산
print(mean, std)
train_scaled = (train_input - mean) / std

plt.scatter(train_scaled[:,0], train_scaled[:,1])
plt.scatter(25, 150, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

#     샘플[25,150] 또한 동일한 기준으로 변환
new = ([25,150] - mean) / std
plt.scatter(train_scaled[:,0], train_scaled[:,1])
plt.scatter(new[0], new[1], marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

# 8. 위 데이터 셋으로 다시 훈련
kn.fit(train_scaled, train_target)

# 9. 평가할 테스트 세트도 위와 동일한 표준점수로 변환
test_scaled = (test_input - mean) / std

# 10. 모델 평가
kn.score(test_scaled, test_target)
print(kn.predict([new])) # >>> 도미 [1] 로 예측

distances, indexes = kn.kneighbors([new])
plt.scatter(train_scaled[:,0], train_scaled[:,1])
plt.scatter(train_scaled[indexes,0], train_scaled[indexes,1], marker='D')
plt.scatter(new[0], new[1], marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

